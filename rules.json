[
  {
    "keyword": "print",
    "patterns": [
      "^print\\s+(.*)$",
      "^output\\s+(.*)$",
      "^display\\s+(.*)$"
    ],
    "template": "System.out.println(%s);"
  },
  {
    "keyword": "input int",
    "patterns": [
      "^input\\s+int\\s+(\\w+)$",
      "^read int\\s+(\\w+)$"
    ],
    "template": "int %s = sc.nextInt();"
  },
  {
    "keyword": "input double",
    "patterns": [
      "^input\\s+double\\s+(\\w+)$"
    ],
    "template": "double %s = sc.nextDouble();"
  },
  {
    "keyword": "input string",
    "patterns": [
      "^input\\s+string\\s+(\\w+)$",
      "^input\\s+line\\s+(\\w+)$"
    ],
    "template": "String %s = sc.nextLine();"
  },
  {
    "keyword": "if",
    "patterns": [
      "^if\\s+(.*)$"
    ],
    "template": "if (%s) {"
  },
  {
    "keyword": "else if",
    "patterns": [
      "^else if\\s+(.*)$"
    ],
    "template": "} else if (%s) {"
  },
  {
    "keyword": "else",
    "patterns": [
      "^else$"
    ],
    "template": "} else {"
  },
  {
    "keyword": "endif",
    "patterns": [
      "^endif$"
    ],
    "template": "}"
  },
  {
    "keyword": "for",
    "patterns": [
      "^for\\s+(\\w+)\\s*=\\s*(\\w+)\\s*to\\s*(\\w+)$"
    ],
    "template": "for (int %s = %s; %s <= %s; %s++) {"
  },
  {
    "keyword": "endfor",
    "patterns": [
      "^endfor$"
    ],
    "template": "}"
  },
  {
    "keyword": "while",
    "patterns": [
      "^while\\s+(.*)$"
    ],
    "template": "while (%s) {"
  },
  {
    "keyword": "endwhile",
    "patterns": [
      "^endwhile$"
    ],
    "template": "}"
  },
  {
    "keyword": "break",
    "patterns": [
      "^break$"
    ],
    "template": "break;"
  },
  {
    "keyword": "continue",
    "patterns": [
      "^continue$"
    ],
    "template": "continue;"
  },
  {
    "keyword": "array declaration",
    "patterns": [
      "^(int|string)\\s+(\\w+)\\[(\\w+)\\]$"
    ],
    "template": "%s[] %s = new %s[%s];"
  },
  {
    "keyword": "array assignment",
    "patterns": [
      "^(\\w+)\\[(.+)\\]\\s*=\\s*(.+)$"
    ],
    "template": "%s[%s] = %s;"
  },
  {
    "keyword": "string",
    "patterns": [
      "^string\\s+(\\w+)\\s*=\\s*\\\"(.*)\\\"$"
    ],
    "template": "String %s = \"%s\";"
  },
  {
    "keyword": "string concatenation",
    "patterns": [
      "^(\\w+)\\s*=\\s*(\\w+)\\s*\\+\\s*(.+)$"
    ],
    "template": "%s = %s + %s;"
  },
  {
    "keyword": "field declaration",
    "patterns": [
      "^(int|String|double)\\s+(\\w+)$"
    ],
    "template": "private %s %s;"
  },
  {
    "keyword": "class declaration",
    "patterns": [
      "^class\\s+(\\w+)\\s*,\\s*(\\w+)$",
      "^class\\s+(\\w+)$"
    ],
    "template": "class %s%s {"
  },

  {
    "keyword": "function declaration",
    "patterns": [
      "^function\\s+(\\w+)\\((.*)\\)$"
    ],
    "template": "public void %s(%s) {"
  },
  {
    "keyword": "endfunction",
    "patterns": [
      "^endfunction$"
    ],
    "template": "}"
  },
  {
    "keyword": "return",
    "patterns": [
      "^return\\s+(.*)$"
    ],
    "template": "return %s;"
  },
  {
    "keyword": "try",
    "patterns": [
      "^try$"
    ],
    "template": "try {"
  },
  {
    "keyword": "catch",
    "patterns": [
      "^catch\\s+(.*)$"
    ],
    "template": "} catch (%s) {"
  },
  {
    "keyword": "endtry",
    "patterns": [
      "^endtry$"
    ],
    "template": "}"
  },
  {
    "keyword": "object creation",
    "patterns": [
      "^(\\w+)\\s+(\\w+)\\(\\)$"
    ],
    "template": "%s %s = new %s();"
  }
]
